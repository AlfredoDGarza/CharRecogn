/*
 * @(#)SettingsRNAView.java 1.0 01/11/2016
 */
package views;

/**
 * Interfaz gráfica donde el usuario modifica las opciones de la red neuronal
 * artificial
 *
 * @author Alfredo de la Garza
 * @version 1.0 01/11/2016
 * @since 1.0
 */
public class SettingsRNAView extends javax.swing.JFrame {

    /**
     * Identificador del caracter
     */
    int id;
    /**
     * Factor de aprendizaje de la red neuronal
     */
    double factorAprendizaje;
    /**
     * Error aceptado por cada época de la red neuronal
     */
    double error;
    /**
     * Iteraciones máximas de la red neuronal
     */
    int iteraciones;

    /**
     * Constructor de la clase.
     */
    public SettingsRNAView() {
        initComponents();

        id = connection.RNA.getId();
        factorAprendizaje = connection.RNA.getFactorAprendizaje();
        error = connection.RNA.getError();
        iteraciones = connection.RNA.getIteracionesMaximas();

        showInformation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSettings = new javax.swing.JPanel();
        lblFactorAprendizaje = new javax.swing.JLabel();
        lblError = new javax.swing.JLabel();
        lblIteraciones = new javax.swing.JLabel();
        txtFactor = new javax.swing.JTextField();
        txtError = new javax.swing.JTextField();
        txtIteraciones = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CharRecogn | Ajustes RNA");
        setIconImage(getIconImage());
        setResizable(false);

        pnlSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)), "Ajustes de la red neuronal"));

        lblFactorAprendizaje.setText("Factor de aprendizaje");

        lblError.setText("Error admitido");

        lblIteraciones.setText("Iteraciones máximas");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSettingsLayout = new javax.swing.GroupLayout(pnlSettings);
        pnlSettings.setLayout(pnlSettingsLayout);
        pnlSettingsLayout.setHorizontalGroup(
            pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnGuardar)
                    .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(pnlSettingsLayout.createSequentialGroup()
                            .addComponent(lblIteraciones)
                            .addGap(18, 18, 18)
                            .addComponent(txtIteraciones, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
                        .addGroup(pnlSettingsLayout.createSequentialGroup()
                            .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblFactorAprendizaje)
                                .addComponent(lblError))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtFactor, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                                .addComponent(txtError)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        pnlSettingsLayout.setVerticalGroup(
            pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFactorAprendizaje)
                    .addComponent(txtFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblError)
                    .addComponent(txtError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIteraciones)
                    .addComponent(txtIteraciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(btnGuardar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(329, 235));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Almacena la información de la red neuronal aritificial.
     *
     * @param evt
     */
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        int des = javax.swing.JOptionPane.showConfirmDialog(null, "Seguro que desea guardar la nueva información de la red", "Guardar", javax.swing.JOptionPane.YES_NO_OPTION);

        if (des == 0) {
            int idChar = id;
            double factorA = Double.parseDouble(txtFactor.getText());
            double errorC = Double.parseDouble(txtError.getText());
            int iteracionesM = Integer.parseInt(txtIteraciones.getText());

            int res = connection.RNA.saveInformation(idChar, factorA, errorC, iteracionesM);

            if (res == 1) {
                javax.swing.JOptionPane.showMessageDialog(null, "información almacenada con éxito", "Información almacenada", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                MainView mainView = new MainView();
                mainView.setVisible(true);
            }

            this.dispose();
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    /**
     * Muestra los datos de la información de la red neuronal artificial.
     */
    private void showInformation() {
        txtFactor.setText(String.valueOf(factorAprendizaje));
        txtError.setText(String.valueOf(error));
        txtIteraciones.setText(String.valueOf(iteraciones));
    }

    /**
     * Retorna el ícono del frame.
     *
     * @return ícono del frame
     */
    @Override
    public java.awt.Image getIconImage() {
        java.awt.Image retValue = java.awt.Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("resources/icons/icon-app-1.png"));

        return retValue;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblFactorAprendizaje;
    private javax.swing.JLabel lblIteraciones;
    private javax.swing.JPanel pnlSettings;
    private javax.swing.JTextField txtError;
    private javax.swing.JTextField txtFactor;
    private javax.swing.JTextField txtIteraciones;
    // End of variables declaration//GEN-END:variables
}
