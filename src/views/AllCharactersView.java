/*
 * @(#)AllCharactersView.java 1.0 01/11/2016
 */
package views;

import connection.Chars;

/**
 * Interfaz gráfica donde se muestran todos los caracteres almacenados en la
 * base de datos
 *
 * @author Alfredo de la Garza.
 * @version 1.0 01/11/2016
 * @since 1.0
 */
public class AllCharactersView extends javax.swing.JFrame {

    /**
     * Constructor de la clase.
     */
    public AllCharactersView() {
        initComponents();

        loadCharacters();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlContainerTable = new javax.swing.JScrollPane();
        tblCharacters = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        btnAddCharacter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CharRecogn | Lista de caracteres almacenados");
        setIconImage(getIconImage());
        setResizable(false);

        pnlContainerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlContainerTableMouseClicked(evt);
            }
        });

        tblCharacters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "ID", "Caracter", "Vector de bits"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCharacters.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblCharactersMousePressed(evt);
            }
        });
        pnlContainerTable.setViewportView(tblCharacters);
        if (tblCharacters.getColumnModel().getColumnCount() > 0) {
            tblCharacters.getColumnModel().getColumn(0).setMinWidth(50);
            tblCharacters.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblCharacters.getColumnModel().getColumn(0).setMaxWidth(50);
            tblCharacters.getColumnModel().getColumn(1).setMinWidth(100);
            tblCharacters.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblCharacters.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Lista de caracteres almacenados\n");

        btnAddCharacter.setText("Agregar");
        btnAddCharacter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCharacterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlContainerTable, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAddCharacter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(pnlContainerTable, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddCharacter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(609, 429));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Selecciona un elemento de la tabla al hacer doble clic sobre él
     *
     * @param evt
     */
    private void tblCharactersMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCharactersMousePressed
        // TODO add your handling code here:
        javax.swing.JTable table = (javax.swing.JTable) evt.getSource();
        java.awt.Point point = evt.getPoint();
        int row = table.rowAtPoint(point);

        if (evt.getClickCount() == 2) {
            int id = -1;

            try {
                id = Integer.parseInt(String.valueOf(tblCharacters.getValueAt(tblCharacters.getSelectedRow(), 0)));
            } catch (NumberFormatException e) {
            }

            if (id > 0) {
                java.util.List<models.Char> listCharacters = connection.Chars.getAllCharacters();

                for (int i = 0; i < listCharacters.size(); i++) {
                    models.Char character = listCharacters.get(i);

                    if (character.getId() == id) {
                        ShowCharacterView showCharacterView = new ShowCharacterView(character);
                        showCharacterView.setVisible(true);
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_tblCharactersMousePressed

    /**
     * Agrega un caracter a la base de datos.
     *
     * @param evt
     */
    private void btnAddCharacterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCharacterActionPerformed
        // TODO add your handling code here:
        AddCharacterView addCharacterView = new AddCharacterView();
        addCharacterView.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_btnAddCharacterActionPerformed

    /**
     * Selecciona un dato de caracter para eliminar o modificar.
     *
     * @param evt
     */
    private void pnlContainerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlContainerTableMouseClicked
        // TODO add your handling code here:
        javax.swing.JTable table = (javax.swing.JTable) evt.getSource();
        java.awt.Point point = evt.getPoint();
        int row = table.rowAtPoint(point);
    }//GEN-LAST:event_pnlContainerTableMouseClicked

    /**
     * Carga todos los caracteres en la tabla para visualizarlos
     */
    private void loadCharacters() {
        int[] id = Chars.getIdAllCharacters();
        String[] names = Chars.getNamesAllCharacters();
        String[] bits = Chars.getBitsCharacters();

        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tblCharacters.getModel();

        Object[] information = new Object[3];

        for (int i = 0; i < id.length; i++) {
            information[0] = id[i];
            information[1] = names[i];
            information[2] = bits[i];

            model.addRow(information);
            tblCharacters.setModel(model);
        }
    }

    /**
     * Retorna el ícono del frame.
     *
     * @return ícono del frame
     */
    @Override
    public java.awt.Image getIconImage() {
        java.awt.Image retValue = java.awt.Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("resources/icons/icon-app-1.png"));

        return retValue;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCharacter;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JScrollPane pnlContainerTable;
    private javax.swing.JTable tblCharacters;
    // End of variables declaration//GEN-END:variables
}
