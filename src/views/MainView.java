/*
 * @(#)MainView.java 1.0 30/10/2016
 */
package views;

import java.text.DecimalFormat;
import rna.Matriz;
import rna.Red;

/**
 * Interfaz gráfica principal donde el usuario interactúa con la aplicación
 *
 * @author Alfredo de la Garza
 * @version 1.0 30/10/2016
 * @since 1.0
 */
public class MainView extends javax.swing.JFrame {

    /**
     * Vector de entrada del caracter
     */
    int[] matrizEntrada = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    /**
     * Patrones de los caracteres almacenados. <br><br>
     * Longitud del vector de bits de un caracter: 35 <br>
     * Número de caracteres: N
     */
    double[][] patronesEntrada;
    /**
     * Objetivos que debe aprender la red neuronal para cada caracter
     */
    double[][] patronesObjetivo;
    /**
     * Nombres de cada caracter almacenado
     */
    String[] nombresPatrones;

    /**
     * Red Neuronal Artificial
     */
    Red red;

    /**
     * Son todos los caracteres almacenados. <br><br>
     * Longitud de vector de bits de un caracter: 35 <br>
     * Número de caracteres almacenados: N
     */
    Matriz matrizPatronesEntrada;
    /**
     * Son aquellos patrones que debe reconocer la red neuronal artificial para
     * cada caracter. <br>
     * Por ejemplo, si tenemos <b>4</b> caracteres almacenados, entonces, la
     * matriz de patrones de salida debe tener unas dimensiones de
     * <b>[4x4]</b><br>
     * Las dimensiones de la matriz de patrones de salida serán la cantidad de
     * números de caracteres almacenados. <br><br>
     * Tomando en cuenta el ejemplo de <b>4</b> caracteres almacenados, la
     * matriz de patrones de salida será: <br><br>
     * | 1 0 0 0 | <br>
     * | 0 1 0 0 | <br>
     * | 0 0 1 0 | <br> | 0 0 0 1 |
     */
    Matriz matrizPatronesObjetivo;

    /**
     * Constructor vacío
     */
    public MainView() {
        initComponents();

        patronesEntrada = connection.Chars.getBitsAllCharacters();
        nombresPatrones = connection.Chars.getNamesAllCharacters();

        patronesObjetivo = new double[patronesEntrada.length][patronesEntrada.length];

        int pos = 0;
        for (int x = 0; x < patronesObjetivo.length; x++) {
            for (int y = 0; y < patronesObjetivo[0].length; y++) {
                if (y == pos) {
                    patronesObjetivo[x][y] = 1;
                } else {
                    patronesObjetivo[x][y] = 0;
                }
            }
            pos++;
        }

        setMessage("Aplicación iniciada \n");
        trainRNA();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlInformation = new javax.swing.JPanel();
        pnlInformationScroll = new javax.swing.JScrollPane();
        txtInformation = new javax.swing.JTextArea();
        pnlCharacter = new javax.swing.JPanel();
        pnlDrawCharacter = new java.awt.Canvas();
        lblVectorBits = new javax.swing.JLabel();
        pnlMenu2 = new javax.swing.JPanel();
        btnIdentifyCharacter2 = new javax.swing.JButton();
        btnRestart2 = new javax.swing.JButton();
        btnShowAllCharacters2 = new javax.swing.JButton();
        pnlRecognChar = new javax.swing.JPanel();
        lblCharIngress = new javax.swing.JLabel();
        lblChar = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        mnSettings = new javax.swing.JMenu();
        mntmAddCharacters = new javax.swing.JMenuItem();
        mntmRnaSettings = new javax.swing.JMenuItem();
        mnInformation = new javax.swing.JMenu();
        mntmAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CharRecogn | Reconocimiento de caracteres por medio de redes neuronales artificiales");
        setIconImage(getIconImage());
        setLocationByPlatform(true);
        setName("MainView"); // NOI18N
        setPreferredSize(new java.awt.Dimension(700, 415));
        setResizable(false);

        pnlInformation.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)), "Información de la red neuronal artificial"));

        txtInformation.setEditable(false);
        txtInformation.setColumns(20);
        txtInformation.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtInformation.setLineWrap(true);
        txtInformation.setRows(5);
        txtInformation.setWrapStyleWord(true);
        pnlInformationScroll.setViewportView(txtInformation);

        javax.swing.GroupLayout pnlInformationLayout = new javax.swing.GroupLayout(pnlInformation);
        pnlInformation.setLayout(pnlInformationLayout);
        pnlInformationLayout.setHorizontalGroup(
            pnlInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlInformationScroll)
        );
        pnlInformationLayout.setVerticalGroup(
            pnlInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlInformationScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
        );

        pnlCharacter.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)), "Información del caracter"));

        pnlDrawCharacter.setBackground(new java.awt.Color(255, 255, 255));
        pnlDrawCharacter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlDrawCharacterMousePressed(evt);
            }
        });
        pnlDrawCharacter.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlDrawCharacterMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                pnlDrawCharacterMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout pnlCharacterLayout = new javax.swing.GroupLayout(pnlCharacter);
        pnlCharacter.setLayout(pnlCharacterLayout);
        pnlCharacterLayout.setHorizontalGroup(
            pnlCharacterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCharacterLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(pnlDrawCharacter, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        pnlCharacterLayout.setVerticalGroup(
            pnlCharacterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCharacterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlDrawCharacter, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblVectorBits.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblVectorBits.setText("Bits:");

        pnlMenu2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)), "Menú"));

        btnIdentifyCharacter2.setText("Identificar caracter");
        btnIdentifyCharacter2.setBorderPainted(false);
        btnIdentifyCharacter2.setFocusPainted(false);
        btnIdentifyCharacter2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdentifyCharacterActionPerformed(evt);
            }
        });

        btnRestart2.setText("Reiniciar");
        btnRestart2.setBorderPainted(false);
        btnRestart2.setFocusPainted(false);
        btnRestart2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestartActionPerformed(evt);
            }
        });

        btnShowAllCharacters2.setText("<html> Mostrar todos los <br><center>caracteres ");
        btnShowAllCharacters2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAllCharactersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMenu2Layout = new javax.swing.GroupLayout(pnlMenu2);
        pnlMenu2.setLayout(pnlMenu2Layout);
        pnlMenu2Layout.setHorizontalGroup(
            pnlMenu2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenu2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMenu2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnIdentifyCharacter2, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(btnRestart2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnShowAllCharacters2))
                .addContainerGap())
        );
        pnlMenu2Layout.setVerticalGroup(
            pnlMenu2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenu2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnIdentifyCharacter2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRestart2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnShowAllCharacters2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pnlRecognChar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)), "Caracter"));

        lblCharIngress.setText("Caracter ingresado");

        lblChar.setFont(new java.awt.Font("Tahoma", 0, 120)); // NOI18N
        lblChar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblChar.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout pnlRecognCharLayout = new javax.swing.GroupLayout(pnlRecognChar);
        pnlRecognChar.setLayout(pnlRecognCharLayout);
        pnlRecognCharLayout.setHorizontalGroup(
            pnlRecognCharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRecognCharLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRecognCharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblChar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCharIngress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlRecognCharLayout.setVerticalGroup(
            pnlRecognCharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRecognCharLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCharIngress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblChar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        mnSettings.setText("Herramientas");

        mntmAddCharacters.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/add-icon.png"))); // NOI18N
        mntmAddCharacters.setText("Agregar caracteres");
        mntmAddCharacters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmAddCharactersActionPerformed(evt);
            }
        });
        mnSettings.add(mntmAddCharacters);

        mntmRnaSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/settings-icon.png"))); // NOI18N
        mntmRnaSettings.setText("Opciones de la red neuronal artificial");
        mntmRnaSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmRnaSettingsActionPerformed(evt);
            }
        });
        mnSettings.add(mntmRnaSettings);

        menuBar.add(mnSettings);

        mnInformation.setText("Información");

        mntmAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/about-icon.png"))); // NOI18N
        mntmAbout.setText("Acerca de");
        mntmAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmAboutActionPerformed(evt);
            }
        });
        mnInformation.add(mntmAbout);

        menuBar.add(mnInformation);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlMenu2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnlRecognChar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                        .addComponent(pnlCharacter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblVectorBits, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(pnlCharacter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlRecognChar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pnlMenu2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblVectorBits)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setVectorBits();

        getAccessibleContext().setAccessibleDescription("");

        setSize(new java.awt.Dimension(678, 486));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Agrega un nuevo caracter a la base de datos.
     *
     * @param evt
     */
    private void mntmAddCharactersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmAddCharactersActionPerformed
        // TODO add your handling code here:
        AddCharacterView addCharacterView = new AddCharacterView();
        addCharacterView.setVisible(true);
    }//GEN-LAST:event_mntmAddCharactersActionPerformed

    /**
     * Ajustes de la red neuronal artificial.
     *
     * @param evt
     */
    private void mntmRnaSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmRnaSettingsActionPerformed
        // TODO add your handling code here:
        SettingsRNAView settingsRNAView = new SettingsRNAView();
        settingsRNAView.setVisible(true);
    }//GEN-LAST:event_mntmRnaSettingsActionPerformed

    /**
     * Dibuja las lineas al momento de mover el mouse soubre el área de dibujo.
     *
     * @param evt
     */
    private void pnlDrawCharacterMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDrawCharacterMouseMoved
        // TODO add your handling code here:
        drawLinesAreaCharacter();
    }//GEN-LAST:event_pnlDrawCharacterMouseMoved

    /**
     * Evento que ocurre cuando se da un clic con el mouse en el área de dibujo.
     * <br>
     * El evento irá actualizando el vector de bits del caracter.
     *
     * @param evt
     */
    private void pnlDrawCharacterMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDrawCharacterMousePressed
        // TODO add your handling code here:
        int pixelWidth = (pnlDrawCharacter.getWidth() / 5);
        int pixelHeight = (pnlDrawCharacter.getHeight() - 1) / 7;

        int width = pnlDrawCharacter.getWidth();
        int height = pnlDrawCharacter.getHeight();

        int x = evt.getX();
        int y = evt.getY();

        java.awt.Graphics graphics = pnlDrawCharacter.getGraphics();
        graphics.setColor(java.awt.Color.BLACK);

        //FILA 1
        if (y > 0 && y <= pixelHeight) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[0] = 1;
                graphics.fillRect(0, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[1] = 1;
                graphics.fillRect(pixelWidth, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[2] = 1;
                graphics.fillRect(pixelWidth * 2, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[3] = 1;
                graphics.fillRect(pixelWidth * 3, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[4] = 1;
                graphics.fillRect(pixelWidth * 4, 0, pixelWidth, pixelHeight);
            }
        }
        //FILA 2
        if (y > pixelHeight && y <= pixelHeight * 2) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[5] = 1;
                graphics.fillRect(0, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[6] = 1;
                graphics.fillRect(pixelWidth, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[7] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[8] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[9] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight, pixelWidth, pixelHeight);
            }
        }
        //FILA 3
        if (y > pixelHeight * 2 && y <= pixelHeight * 3) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[10] = 1;
                graphics.fillRect(0, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[11] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[12] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[13] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[14] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 2, pixelWidth, pixelHeight);
            }
        }
        //FILA 4
        if (y > pixelHeight * 3 && y <= pixelHeight * 4) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[15] = 1;
                graphics.fillRect(0, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[16] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[17] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[18] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[19] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 3, pixelWidth, pixelHeight);
            }
        }
        //FILA 5
        if (y > pixelHeight * 4 && y <= pixelHeight * 5) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[20] = 1;
                graphics.fillRect(0, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[21] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[22] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[23] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[24] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 4, pixelWidth, pixelHeight);
            }
        }
        //FILA 6
        if (y > pixelHeight * 5 && y <= pixelHeight * 6) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[25] = 1;
                graphics.fillRect(0, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[26] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[27] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[28] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[29] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 5, pixelWidth, pixelHeight);
            }
        }
        //FILA 7
        if (y > pixelHeight * 6 && y <= pixelHeight * 7) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[30] = 1;
                graphics.fillRect(0, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[31] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[32] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[33] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[34] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 6, pixelWidth, pixelHeight);
            }
        }

        setVectorBits();
        graphics.dispose();
    }//GEN-LAST:event_pnlDrawCharacterMousePressed

    /**
     * Evento que ocurre cuando se arrastra el mouse a través del área de
     * dibujo. <br>
     * El evento irá actualizando el vector de bits del caracter.
     *
     * @param evt
     */
    private void pnlDrawCharacterMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDrawCharacterMouseDragged
        // TODO add your handling code here:
        int pixelWidth = (pnlDrawCharacter.getWidth() / 5);
        int pixelHeight = (pnlDrawCharacter.getHeight() - 1) / 7;

        int width = pnlDrawCharacter.getWidth();
        int height = pnlDrawCharacter.getHeight();

        int x = evt.getX();
        int y = evt.getY();

        java.awt.Graphics graphics = pnlDrawCharacter.getGraphics();
        graphics.setColor(java.awt.Color.BLACK);

        //FILA 1
        if (y > 0 && y <= pixelHeight) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[0] = 1;
                graphics.fillRect(0, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[1] = 1;
                graphics.fillRect(pixelWidth, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[2] = 1;
                graphics.fillRect(pixelWidth * 2, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[3] = 1;
                graphics.fillRect(pixelWidth * 3, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[4] = 1;
                graphics.fillRect(pixelWidth * 4, 0, pixelWidth, pixelHeight);
            }
        }
        //FILA 2
        if (y > pixelHeight && y <= pixelHeight * 2) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[5] = 1;
                graphics.fillRect(0, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[6] = 1;
                graphics.fillRect(pixelWidth, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[7] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[8] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[9] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight, pixelWidth, pixelHeight);
            }
        }
        //FILA 3
        if (y > pixelHeight * 2 && y <= pixelHeight * 3) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[10] = 1;
                graphics.fillRect(0, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[11] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[12] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[13] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[14] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 2, pixelWidth, pixelHeight);
            }
        }
        //FILA 4
        if (y > pixelHeight * 3 && y <= pixelHeight * 4) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[15] = 1;
                graphics.fillRect(0, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[16] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[17] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[18] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[19] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 3, pixelWidth, pixelHeight);
            }
        }
        //FILA 5
        if (y > pixelHeight * 4 && y <= pixelHeight * 5) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[20] = 1;
                graphics.fillRect(0, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[21] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[22] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[23] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[24] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 4, pixelWidth, pixelHeight);
            }
        }
        //FILA 6
        if (y > pixelHeight * 5 && y <= pixelHeight * 6) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[25] = 1;
                graphics.fillRect(0, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[26] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[27] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[28] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[29] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 5, pixelWidth, pixelHeight);
            }
        }
        //FILA 7
        if (y > pixelHeight * 6 && y <= pixelHeight * 7) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[30] = 1;
                graphics.fillRect(0, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[31] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[32] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[33] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[34] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 6, pixelWidth, pixelHeight);
            }
        }

        setVectorBits();
        graphics.dispose();
    }//GEN-LAST:event_pnlDrawCharacterMouseDragged

    /**
     * Muestra la información básica del programa.
     *
     * @param evt
     */
    private void mntmAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmAboutActionPerformed
        // TODO add your handling code here:
        AboutView aboutView = new AboutView();
        aboutView.setVisible(true);
    }//GEN-LAST:event_mntmAboutActionPerformed

    /**
     * Muestra todos los caracteres almacenados en la base de datos.
     *
     * @param evt
     */
    private void btnShowAllCharactersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAllCharactersActionPerformed
        // TODO add your handling code here:
        AllCharactersView allCharactersView = new AllCharactersView();
        allCharactersView.setVisible(true);
    }//GEN-LAST:event_btnShowAllCharactersActionPerformed

    /**
     * Restaura el área de dibujo de caracter
     *
     * @param evt
     */
    private void btnRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestartActionPerformed
        // TODO add your handling code here:
        pnlDrawCharacter.repaint();

        for (int i = 0; i < 35; i++) {
            matrizEntrada[i] = 0;
        }

        txtInformation.setText("");
        lblChar.setText("");
        setMessage("Aplicación iniciada. ");
        setMessage("Ingrese el caracter que desee reconocer/identificar. \n");

        setVectorBits();
    }//GEN-LAST:event_btnRestartActionPerformed

    /**
     * Intenta identificar el caracter ingresado mediante la red neuronal
     * artificial
     *
     * @param evt
     */
    private void btnIdentifyCharacterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIdentifyCharacterActionPerformed
        // TODO add your handling code here:
        boolean isCorrect = true;

        for (int i = 0; i < 35; i++) {
            if (matrizEntrada[i] == 0) {
                isCorrect = false;
            } else if (matrizEntrada[i] != 0) {
                isCorrect = true;
                break;
            }
        }

        if (isCorrect) {
            //Caracter mas probable
            double[] caracter = new double[matrizEntrada.length];
            for (int i = 0; i < caracter.length; i++) {
                caracter[i] = Double.parseDouble(String.valueOf(matrizEntrada[i]));
            }

            Matriz temp = new Matriz(caracter);
            temp = Matriz.transponer(temp);

            Matriz resp = Red.simularRed(red, temp);
            DecimalFormat df = new DecimalFormat("0.00");

            setMessage("\nResultados según la red neuronal artificial");

            for (int i = 0; i < patronesEntrada.length; i++) {
                setMessage(nombresPatrones[i] + ": " + String.valueOf(df.format(Matriz.transponer(resp).getMatriz()[0][i])) + " ");
            }

            temp = new Matriz(Matriz.transponer(resp).getMatriz()[0]);
            String nameChar = Matriz.masProbable(temp, nombresPatrones);
            setMessage("Caracter ingresado: " + nameChar);
            lblChar.setText(nameChar);
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Debe introducir un caracter", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIdentifyCharacterActionPerformed

    /**
     * Dibuja las líneas en el área de dibujo del caracter.
     */
    private void drawLinesAreaCharacter() {
        int pixelWidth = (pnlDrawCharacter.getWidth() / 5);
        int pixelHeight = (pnlDrawCharacter.getHeight() - 1) / 7;

        int width = pnlDrawCharacter.getWidth();
        int height = pnlDrawCharacter.getHeight();

        java.awt.Graphics graphics = pnlDrawCharacter.getGraphics();

        graphics.setColor(java.awt.Color.BLUE);

        graphics.drawLine(0, 0, 0, height);
        graphics.drawLine(pixelWidth, 0, pixelWidth, height);
        graphics.drawLine(pixelWidth * 2, 0, pixelWidth * 2, height);
        graphics.drawLine(pixelWidth * 3, 0, pixelWidth * 3, height);
        graphics.drawLine(pixelWidth * 4, 0, pixelWidth * 4, height);
        graphics.drawLine(pixelWidth * 5, 0, pixelWidth * 5, height);
        graphics.drawLine(pixelWidth * 6, 0, pixelWidth * 6, height);

        graphics.drawLine(0, 0, width, 0);
        graphics.drawLine(0, pixelHeight, width, pixelHeight);
        graphics.drawLine(0, pixelHeight * 2, width, pixelHeight * 2);
        graphics.drawLine(0, pixelHeight * 3, width, pixelHeight * 3);
        graphics.drawLine(0, pixelHeight * 4, width, pixelHeight * 4);
        graphics.drawLine(0, pixelHeight * 5, width, pixelHeight * 5);
        graphics.drawLine(0, pixelHeight * 6, width, pixelHeight * 6);
        graphics.drawLine(0, pixelHeight * 7, width, pixelHeight * 7);

        graphics.dispose();
    }

    /**
     * Actualiza en tiempo real el vector de bits del caracter conforme el
     * usuario lo vaya ingresando.
     */
    private void setVectorBits() {
        StringBuilder vectorBitsChar = new StringBuilder();
        for (int i = 0; i < matrizEntrada.length; i++) {
            if (i == matrizEntrada.length - 1) {
                vectorBitsChar.append(matrizEntrada[i]);
            } else {
                vectorBitsChar.append(matrizEntrada[i] + ", ");
            }
        }
        String vector = vectorBitsChar.toString();

        lblVectorBits.setText("Bits: [ " + vector + " ]");
    }

    /**
     * Aloja un mensaje al campo de texto de información de la red neuronal
     *
     * @param message mensaje a imprimir
     */
    public final void setMessage(String message) {
        txtInformation.append(message);
        txtInformation.append("\n");

        txtInformation.setCaretPosition(txtInformation.getDocument().getLength() - 1);
    }

    /**
     * Entrena la red neuronal artificial
     */
    public void trainRNA() {
        matrizPatronesEntrada = new Matriz(patronesEntrada);
        matrizPatronesEntrada = Matriz.transponer(matrizPatronesEntrada);

        matrizPatronesObjetivo = new Matriz(patronesObjetivo);
        matrizPatronesObjetivo = Matriz.transponer(matrizPatronesObjetivo);

        red = new Red(matrizPatronesEntrada, matrizPatronesObjetivo);

        setMessage("Información acerca de la red neuronal artificial");
        setMessage("- Número de nodos de la capa de entrada: " + patronesEntrada[0].length);
        setMessage("- Número de nodos de la capa oculta: " + red.getNumeroNodosCapaOculta());
        setMessage("- Número de nodos de la capa de salida: " + patronesEntrada.length + "\n");

        setMessage("Matriz de objetivos [" + matrizPatronesObjetivo.getFilasString() + "x" + matrizPatronesObjetivo.getColumnasString() + "]");
        setMessage(matrizPatronesObjetivo.toStringMatriz());

        setMessage("Matriz de patrones [" + matrizPatronesEntrada.getFilasString() + "x" + matrizPatronesEntrada.getColumnasString() + "]");
        setMessage(matrizPatronesEntrada.toStringMatriz());

        //Entrenamiento
        double factorAprendizaje = connection.RNA.getFactorAprendizaje();
        double error = connection.RNA.getError();
        int iteracionesMaximas = connection.RNA.getIteracionesMaximas();

        String respuesta = Red.entrenarRed(red, factorAprendizaje, error, iteracionesMaximas);
        setMessage(respuesta);

    }

    /**
     * Retorna el ícono del frame.
     *
     * @return ícono del frame
     */
    @Override
    public java.awt.Image getIconImage() {
        java.awt.Image retValue = java.awt.Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("resources/icons/icon-app-1.png"));

        return retValue;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIdentifyCharacter2;
    private javax.swing.JButton btnRestart2;
    private javax.swing.JButton btnShowAllCharacters2;
    private javax.swing.JLabel lblChar;
    private javax.swing.JLabel lblCharIngress;
    private javax.swing.JLabel lblVectorBits;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu mnInformation;
    private javax.swing.JMenu mnSettings;
    private javax.swing.JMenuItem mntmAbout;
    private javax.swing.JMenuItem mntmAddCharacters;
    private javax.swing.JMenuItem mntmRnaSettings;
    private javax.swing.JPanel pnlCharacter;
    private java.awt.Canvas pnlDrawCharacter;
    private javax.swing.JPanel pnlInformation;
    private javax.swing.JScrollPane pnlInformationScroll;
    private javax.swing.JPanel pnlMenu2;
    private javax.swing.JPanel pnlRecognChar;
    private javax.swing.JTextArea txtInformation;
    // End of variables declaration//GEN-END:variables

}
