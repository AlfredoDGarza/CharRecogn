/*
 * @(#)AddCharacterView.java 1.0 01/11/2016
 */
package views;

import connection.Chars;

/**
 * Interfaz gráfica donde el usuario ingresa un nuevo caracter para almacenarlo
 * en la base de datos.
 *
 * @author Alfredo de la Garza
 * @version 1.0 01/11/2016
 * @since 1.0
 */
public class AddCharacterView extends javax.swing.JFrame {

    /**
     * Vector de entrada del caracter
     */
    int[] matrizEntrada = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    /**
     * Constructor de la clase.
     */
    public AddCharacterView() {
        initComponents();
        setVectorBits();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCharacter = new javax.swing.JPanel();
        pnlDrawCharacter = new java.awt.Canvas();
        pnlMenu = new javax.swing.JPanel();
        btnAddCharacter = new javax.swing.JButton();
        btnRestart = new javax.swing.JButton();
        btnShowAllCharacters = new javax.swing.JButton();
        lblVectorBits = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CharRecogn | Nuevo caracter");
        setIconImage(getIconImage());

        pnlCharacter.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)), "Información del caracter"));

        pnlDrawCharacter.setBackground(new java.awt.Color(255, 255, 255));
        pnlDrawCharacter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlDrawCharacterMousePressed(evt);
            }
        });
        pnlDrawCharacter.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlDrawCharacterMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                pnlDrawCharacterMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout pnlCharacterLayout = new javax.swing.GroupLayout(pnlCharacter);
        pnlCharacter.setLayout(pnlCharacterLayout);
        pnlCharacterLayout.setHorizontalGroup(
            pnlCharacterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCharacterLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(pnlDrawCharacter, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        pnlCharacterLayout.setVerticalGroup(
            pnlCharacterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCharacterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlDrawCharacter, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMenu.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)), "Menú"));

        btnAddCharacter.setText("Agregar caracter");
        btnAddCharacter.setBorderPainted(false);
        btnAddCharacter.setFocusPainted(false);
        btnAddCharacter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCharacterActionPerformed(evt);
            }
        });

        btnRestart.setText("Reiniciar");
        btnRestart.setBorderPainted(false);
        btnRestart.setFocusPainted(false);
        btnRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestartActionPerformed(evt);
            }
        });

        btnShowAllCharacters.setText("<html> Mostrar todos los <br><center>caracteres ");
        btnShowAllCharacters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAllCharactersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMenuLayout = new javax.swing.GroupLayout(pnlMenu);
        pnlMenu.setLayout(pnlMenuLayout);
        pnlMenuLayout.setHorizontalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddCharacter, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(btnRestart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnShowAllCharacters))
                .addContainerGap())
        );
        pnlMenuLayout.setVerticalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddCharacter, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRestart, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnShowAllCharacters, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblVectorBits.setText("Bits:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblVectorBits, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlCharacter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
                        .addComponent(pnlMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlCharacter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblVectorBits)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(519, 317));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Dibuja las líneas en el área de dibujo de caracter
     *
     * @param evt
     */
    private void pnlDrawCharacterMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDrawCharacterMousePressed
        // TODO add your handling code here:
        int pixelWidth = (pnlDrawCharacter.getWidth() / 5);
        int pixelHeight = (pnlDrawCharacter.getHeight() - 1) / 7;

        int width = pnlDrawCharacter.getWidth();
        int height = pnlDrawCharacter.getHeight();

        int x = evt.getX();
        int y = evt.getY();

        java.awt.Graphics graphics = pnlDrawCharacter.getGraphics();
        graphics.setColor(java.awt.Color.BLACK);

        //FILA 1
        if (y > 0 && y <= pixelHeight) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[0] = 1;
                graphics.fillRect(0, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[1] = 1;
                graphics.fillRect(pixelWidth, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[2] = 1;
                graphics.fillRect(pixelWidth * 2, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[3] = 1;
                graphics.fillRect(pixelWidth * 3, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[4] = 1;
                graphics.fillRect(pixelWidth * 4, 0, pixelWidth, pixelHeight);
            }
        }
        //FILA 2
        if (y > pixelHeight && y <= pixelHeight * 2) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[5] = 1;
                graphics.fillRect(0, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[6] = 1;
                graphics.fillRect(pixelWidth, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[7] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[8] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[9] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight, pixelWidth, pixelHeight);
            }
        }
        //FILA 3
        if (y > pixelHeight * 2 && y <= pixelHeight * 3) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[10] = 1;
                graphics.fillRect(0, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[11] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[12] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[13] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[14] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 2, pixelWidth, pixelHeight);
            }
        }
        //FILA 4
        if (y > pixelHeight * 3 && y <= pixelHeight * 4) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[15] = 1;
                graphics.fillRect(0, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[16] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[17] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[18] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[19] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 3, pixelWidth, pixelHeight);
            }
        }
        //FILA 5
        if (y > pixelHeight * 4 && y <= pixelHeight * 5) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[20] = 1;
                graphics.fillRect(0, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[21] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[22] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[23] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[24] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 4, pixelWidth, pixelHeight);
            }
        }
        //FILA 6
        if (y > pixelHeight * 5 && y <= pixelHeight * 6) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[25] = 1;
                graphics.fillRect(0, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[26] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[27] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[28] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[29] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 5, pixelWidth, pixelHeight);
            }
        }
        //FILA 7
        if (y > pixelHeight * 6 && y <= pixelHeight * 7) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[30] = 1;
                graphics.fillRect(0, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[31] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[32] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[33] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[34] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 6, pixelWidth, pixelHeight);
            }
        }

        setVectorBits();
        graphics.dispose();
    }//GEN-LAST:event_pnlDrawCharacterMousePressed

    /**
     * Dibujas las líneas en el área de dibujo del caracter
     *
     * @param evt
     */
    private void pnlDrawCharacterMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDrawCharacterMouseDragged
        // TODO add your handling code here:
        int pixelWidth = (pnlDrawCharacter.getWidth() / 5);
        int pixelHeight = (pnlDrawCharacter.getHeight() - 1) / 7;

        int width = pnlDrawCharacter.getWidth();
        int height = pnlDrawCharacter.getHeight();

        int x = evt.getX();
        int y = evt.getY();

        java.awt.Graphics graphics = pnlDrawCharacter.getGraphics();
        graphics.setColor(java.awt.Color.BLACK);

        //FILA 1
        if (y > 0 && y <= pixelHeight) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[0] = 1;
                graphics.fillRect(0, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[1] = 1;
                graphics.fillRect(pixelWidth, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[2] = 1;
                graphics.fillRect(pixelWidth * 2, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[3] = 1;
                graphics.fillRect(pixelWidth * 3, 0, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[4] = 1;
                graphics.fillRect(pixelWidth * 4, 0, pixelWidth, pixelHeight);
            }
        }
        //FILA 2
        if (y > pixelHeight && y <= pixelHeight * 2) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[5] = 1;
                graphics.fillRect(0, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[6] = 1;
                graphics.fillRect(pixelWidth, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[7] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[8] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[9] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight, pixelWidth, pixelHeight);
            }
        }
        //FILA 3
        if (y > pixelHeight * 2 && y <= pixelHeight * 3) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[10] = 1;
                graphics.fillRect(0, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[11] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[12] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[13] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 2, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[14] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 2, pixelWidth, pixelHeight);
            }
        }
        //FILA 4
        if (y > pixelHeight * 3 && y <= pixelHeight * 4) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[15] = 1;
                graphics.fillRect(0, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[16] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[17] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[18] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 3, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[19] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 3, pixelWidth, pixelHeight);
            }
        }
        //FILA 5
        if (y > pixelHeight * 4 && y <= pixelHeight * 5) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[20] = 1;
                graphics.fillRect(0, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[21] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[22] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[23] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 4, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[24] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 4, pixelWidth, pixelHeight);
            }
        }
        //FILA 6
        if (y > pixelHeight * 5 && y <= pixelHeight * 6) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[25] = 1;
                graphics.fillRect(0, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[26] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[27] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[28] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 5, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[29] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 5, pixelWidth, pixelHeight);
            }
        }
        //FILA 7
        if (y > pixelHeight * 6 && y <= pixelHeight * 7) {
            if (x > 0 && x <= pixelWidth) {
                matrizEntrada[30] = 1;
                graphics.fillRect(0, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth && x <= pixelWidth * 2) {
                matrizEntrada[31] = 1;
                graphics.fillRect(pixelWidth, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 2 && x <= pixelWidth * 3) {
                matrizEntrada[32] = 1;
                graphics.fillRect(pixelWidth * 2, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 3 && x <= pixelWidth * 4) {
                matrizEntrada[33] = 1;
                graphics.fillRect(pixelWidth * 3, pixelHeight * 6, pixelWidth, pixelHeight);
            }
            if (x > pixelWidth * 4 && x <= pixelWidth * 5) {
                matrizEntrada[34] = 1;
                graphics.fillRect(pixelWidth * 4, pixelHeight * 6, pixelWidth, pixelHeight);
            }
        }

        setVectorBits();
        graphics.dispose();
    }//GEN-LAST:event_pnlDrawCharacterMouseDragged

    /**
     * Dibujas las líneas en el áre de dibujo del caracter.
     *
     * @param evt
     */
    private void pnlDrawCharacterMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDrawCharacterMouseMoved
        // TODO add your handling code here:
        drawLinesAreaCharacter();
    }//GEN-LAST:event_pnlDrawCharacterMouseMoved

    /**
     * Agrega el nuevo caracter a la base de datos.
     *
     * @param evt
     */
    private void btnAddCharacterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCharacterActionPerformed
        // TODO add your handling code here:
        StringBuilder vec = new StringBuilder();
        for (int i = 0; i < matrizEntrada.length; i++) {
            vec.append(String.valueOf(matrizEntrada[i]));
        }
        String bits = vec.toString();

        String nameCharacter = javax.swing.JOptionPane.showInputDialog(null, "Ingrese el nombre del caracter", "Nombre del caracter", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        if (!nameCharacter.isEmpty()) {
            int ans = javax.swing.JOptionPane.showConfirmDialog(null, "Seguro que desea almacenar el caracter con nombre " + nameCharacter + " y con un vector de bits de " + bits, "Guardar caracter", javax.swing.JOptionPane.YES_NO_OPTION);

            if (ans == 0) {
                int save = Chars.addCharacter(nameCharacter, bits);

                if (save == 1) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Caracter almacenado con éxito", "Caracter almacenado", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    MainView mainView = new MainView();
                    mainView.setVisible(true);
                }

                this.dispose();
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Ha ocurrido un error al momento de guardar el nuevo caracter", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "El caracter tiene que tener un nombre", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddCharacterActionPerformed

    /**
     * Reinicia el área de dibujo y limpia el área de información
     *
     * @param evt
     */
    private void btnRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestartActionPerformed
        // TODO add your handling code here:
        pnlDrawCharacter.repaint();

        for (int i = 0; i < 35; i++) {
            matrizEntrada[i] = 0;
        }

        setVectorBits();
    }//GEN-LAST:event_btnRestartActionPerformed

    /**
     * Abre una interfaz mostrando en una tabla todos los caracteres ingresados
     * almacenados en la base de datos.
     *
     * @param evt
     */
    private void btnShowAllCharactersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAllCharactersActionPerformed
        // TODO add your handling code here:
        AllCharactersView allCharactersView = new AllCharactersView();
        allCharactersView.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnShowAllCharactersActionPerformed

    /**
     * Dibuja las líneas en el área de dibujo del caracter.
     */
    private void drawLinesAreaCharacter() {
        int pixelWidth = (pnlDrawCharacter.getWidth() / 5);
        int pixelHeight = (pnlDrawCharacter.getHeight() - 1) / 7;

        int width = pnlDrawCharacter.getWidth();
        int height = pnlDrawCharacter.getHeight();

        java.awt.Graphics graphics = pnlDrawCharacter.getGraphics();

        graphics.setColor(java.awt.Color.BLUE);

        graphics.drawLine(0, 0, 0, height);
        graphics.drawLine(pixelWidth, 0, pixelWidth, height);
        graphics.drawLine(pixelWidth * 2, 0, pixelWidth * 2, height);
        graphics.drawLine(pixelWidth * 3, 0, pixelWidth * 3, height);
        graphics.drawLine(pixelWidth * 4, 0, pixelWidth * 4, height);
        graphics.drawLine(pixelWidth * 5, 0, pixelWidth * 5, height);
        graphics.drawLine(pixelWidth * 6, 0, pixelWidth * 6, height);

        graphics.drawLine(0, 0, width, 0);
        graphics.drawLine(0, pixelHeight, width, pixelHeight);
        graphics.drawLine(0, pixelHeight * 2, width, pixelHeight * 2);
        graphics.drawLine(0, pixelHeight * 3, width, pixelHeight * 3);
        graphics.drawLine(0, pixelHeight * 4, width, pixelHeight * 4);
        graphics.drawLine(0, pixelHeight * 5, width, pixelHeight * 5);
        graphics.drawLine(0, pixelHeight * 6, width, pixelHeight * 6);
        graphics.drawLine(0, pixelHeight * 7, width, pixelHeight * 7);

        graphics.dispose();
    }

    /**
     * Actualiza en tiempo real el vector de bits del caracter conforme el
     * usuario lo vaya ingresando.
     */
    private void setVectorBits() {
        StringBuilder vectorBitsChar = new StringBuilder();
        for (int i = 0; i < matrizEntrada.length; i++) {
            if (i == matrizEntrada.length - 1) {
                vectorBitsChar.append(matrizEntrada[i]);
            } else {
                vectorBitsChar.append(matrizEntrada[i] + ", ");
            }
        }
        String vector = vectorBitsChar.toString();

        lblVectorBits.setText("Bits: [ " + vector + " ]");
    }

    /**
     * Retorna el ícono del frame.
     *
     * @return ícono del frame
     */
    @Override
    public java.awt.Image getIconImage() {
        java.awt.Image retValue = java.awt.Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("resources/icons/icon-app-1.png"));

        return retValue;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCharacter;
    private javax.swing.JButton btnRestart;
    private javax.swing.JButton btnShowAllCharacters;
    private javax.swing.JLabel lblVectorBits;
    private javax.swing.JPanel pnlCharacter;
    private java.awt.Canvas pnlDrawCharacter;
    private javax.swing.JPanel pnlMenu;
    // End of variables declaration//GEN-END:variables
}
